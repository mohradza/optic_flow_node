#! /usr/bin/env python

PACKAGE='optic_flow_node'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

group = gen.add_group("top")

rings = group.add_group("Optic Flow Ring Parameters")
rings.add("image_center_x", int_t, 0, "Ring center x position"                 ,              290,      0, 2000          )
rings.add("image_center_y", int_t, 0, "Ring center y position"                 ,              240,      0, 2000          )
rings.add("inner_ring_radius", double_t, 0, "Inner ring radius"                ,              155.0,    1.0, 1000         )
rings.add("ring_dr", int_t, 0, "Pixels between rings"                ,                          20,    1, 100         )
rings.add("num_ring_points", int_t, 0, "Number of points in a ring"            ,              80,       1, 1000          )
rings.add("num_rings", int_t, 0, "Number of rings"                      ,                       5,       1, 10          )
rings.add("blur_size", int_t, 0, "Blur size"                      ,                             5,       0, 101          )
rings.add("alpha", double_t, 0, "Low pass filter"                      ,                        0.5,       0, 1          )

grid = group.add_group("Optic Flow Grid Parameters")
grid.add("num_of_rows", int_t, 0, "Number of optic flow rows"                      ,                           20,       0, 10001          )
grid.add("num_of_cols", int_t, 0, "Number of optic flow columns"                      ,                        10,       0, 10002          )

lk = group.add_group("Lucas Kanade Parameters")
lk.add("pyr_window_size", int_t, 0, "LK Pyramidal window size"           ,                      30,      1, 1000          )
lk.add("pixel_scale", double_t, 0, "Optic flow pixel scaler "           ,                      15,      1, 1000          )

image = group.add_group("Image Parameters")
image.add("if_flip", bool_t, 0, "Flag to flip the image"           ,                      False)
image.add("if_blur", bool_t, 0, "Flag to blur the input image"           ,                      False)
image.add("enable_debug", bool_t, 0, "Enable debugging "           ,                      True)

exit(gen.generate(PACKAGE, "optic_flow_node", "OpticFlowNode"))
